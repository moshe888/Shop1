const express = require('express');
const router = express.Router();
const Product = require('../models/Product');
const Store = require('../models/Store');


// Route to display all products
router.get('/products/:id', async (req, res) => {
  const  id = req.params.id;

  try {
    const store = await Store.findById(id);
    const products = store.products;
    res.render('admin/products', {store, products });
  } catch (error) {
    console.error(error);
    res.status(500).send('Server Error');
  }
});

// Route to add a new product
router.get('/add-product/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const store = await Store.findById(id);
    if (!store) {
      return res.status(404).send('Store not found');
    }
    res.render('admin/add-product', { store });
  } catch (err) {
    console.error(err);
    res.status(500).send('Internal server error');
  }
});


// Route to handle adding a new product
router.post('/add-product/:id', async (req, res) => {
  const ID = req.params.id;

  try {
    const store = await Store.findById(ID);
    if (!store) {
      return res.status(404).send('Store not found');
    }

    const { name, description, price, imageUrl } = req.body;
    const product = new Product({ name, description, price, imageUrl });

    store.products.push(product);
    await store.save();
    res.redirect(`/products/${ID}`);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server Error');
  }
});

 router.get('/edit-product/:idStore/:idProduct', async (req, res) => {
   const productId = req.params.idProduct;
   const storeId = req.params.idStore;

  try {
    const store = await Store.findById(storeId);
    const product = await store.products.id(productId);
    res.render('admin/edit-product', { store , product });
  } catch (error) {
    console.error(error);
    res.status(500).send('Server Error');
  }
});

// // Route to handle editing a product
router.post('/edit-product/:idStore/:idProduct', async (req, res) => {
  const productId = req.params.idProduct;
  const storeId = req.params.idStore;
  try {
    const store = await Store.findById(storeId);

    const { name, description, price, imageUrl } = req.body;
    const updatedProduct = { name, description, price, imageUrl };
    store.products.splice(productId, 1, updatedProduct);
    await store.save();

    res.redirect(`/stores/${storeId}`);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server Error');
  }
});



router.post('/delete-product/:idStore/:idProduct', async (req, res) => {
  const productId = req.params.idProduct;
const storeId = req.params.idStore;
try {
  const store = await Store.findById(storeId);

  store.products = store.products.filter(product => product._id != productId);
    await store.save();
 
  res.redirect(`/products/${storeId}`);
} catch (error) {
  console.error(error);
  res.status(500).send('Server Error');
}

});

// router.post('/delete-product/:id', async (req, res) => {
//   const productId = req.params.id;
//   try {
//      await Product.findByIdAndDelete(productId );
//     res.redirect('/products');
//   } catch (error) {
//     console.error(error);
//     res.status(500).send('Server Error');
//   }
// });

module.exports = router;
